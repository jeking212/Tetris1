package com.tetris.saar.tetris;import android.graphics.Color;import android.media.Image;import android.support.annotation.NonNull;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import java.util.Random;public class GameActivity extends AppCompatActivity implements View.OnClickListener,View.OnTouchListener {    public ImageView[][] blocks = new ImageView[10][24]; //Displayed board    //Game Manager    GameManger gameManger = new GameManger(this);    //Used to run the game on a different thread    Runnable game= new GameThread(gameManger);    Thread thread =new Thread(game);    GameThread gameThread = new GameThread(gameManger);    //Buttons    Button btnRot;    Button btnRight;    Button btnLeft;    //Score TextView    TextView tvScore;    //Next Block place    ImageView[][] nextBlockView = new ImageView[3][3];    //Swipe checker    private float x1,x2,downY,upY;    static final int MIN_DISTANCE = 150;    public GameActivity(){    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_game);        //Random rnd = new Random();        //Syncing the java and the GUI        LinearLayout layout = (LinearLayout)findViewById(R.id.mainLayout);        LinearLayout nextBlockLayout = (LinearLayout) findViewById(R.id.nextBlockLayout);        btnRot = (Button)findViewById(R.id.btnRot);        btnRight = (Button)findViewById(R.id.btnRight);        btnLeft = (Button)findViewById(R.id.btnLeft);        btnRot.setOnClickListener(this);        btnRight.setOnClickListener(this);        btnLeft.setOnClickListener(this);        tvScore = (TextView) findViewById(R.id.tvScore);        //Creating all the ImageView game board        for(int i=0; i< blocks.length; i++) {            LinearLayout row = new LinearLayout(this);            if(i==0){                LinearLayout.LayoutParams leftMarhin = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);                leftMarhin.setMargins(195,0,0,0);                row.setLayoutParams(leftMarhin);            }            row.setOrientation(LinearLayout.VERTICAL);            layout.addView(row);            for (int j = 2; j < blocks[i].length; j++) {                    ImageView image = new ImageView(this);                    //image.setBackgroundColor(Color.rgb(rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255)));                    LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(60, 60);                    lp.setMargins(0, 0, 0, 0);                    image.setLayoutParams(lp);                    image.setMaxHeight(0);                    image.setMaxWidth(0);                    image.setPadding(10, 10, 10, 10);                    String str = "iv" + i + j;                    int resID = getResources().getIdentifier(str, "id", getPackageName());                    image.setId(resID);                    blocks[i][j] = image;                    row.addView(image);            }        }        //Creating all the ImageView for the next block view        for(int i=0; i< nextBlockView.length;i++){            LinearLayout row = new LinearLayout(this);            if(i==0){                LinearLayout.LayoutParams leftMarhin = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);                leftMarhin.setMargins(800,150,0,0);                row.setLayoutParams(leftMarhin);            }            row.setOrientation(LinearLayout.VERTICAL);            nextBlockLayout.addView(row);            for (int j = 2; j < nextBlockView[i].length; j++) {                ImageView image = new ImageView(this);                image.setBackgroundColor(Color.YELLOW);                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(67, 67);                lp.setMargins(0, 0, 0, 0);                image.setLayoutParams(lp);                image.setMaxHeight(0);                image.setMaxWidth(0);                image.setPadding(10, 10, 10, 10);                String str = "iv" + i + j;                int resID = getResources().getIdentifier(str, "id", getPackageName());                image.setId(resID);                nextBlockView[i][j] = image;                row.addView(image);            }        }        toDisplay();        //Starting the game        thread.start();    }    //Display the board ---> convert from int to colored Image View    public void toDisplay(){    int[][] board=  gameManger.getDisplay();        for(int i=blocks.length-1; i>=0; i--){            for(int j=blocks[i].length-1; j>=2; j--){                //Empty block                if(board[i][j]==0){                 blocks[i][j].setBackgroundColor(Color.argb(1000,0,0,0));                }                //Square                if(board[i][j] == 1){                    blocks[i][j].setBackgroundColor(Color.YELLOW);                }                //Line and up right                if(board[i][j] == 2){                    blocks[i][j].setBackgroundColor(Color.rgb(255,140,0));                }                //Line and up left                if(board[i][j]==3){                    blocks[i][j].setBackgroundColor(Color.rgb(0,0,205));                }                //Line                if(board[i][j]==4){                    blocks[i][j].setBackgroundColor(Color.rgb(135,206,250));                }                //Z shaperd                if(board[i][j]==5){                    blocks[i][j].setBackgroundColor(Color.RED);                }                //T shaped                if(board[i][j]==6){                    blocks[i][j].setBackgroundColor(Color.rgb(138,43,226));                }                //S shaped                if(board[i][j]==7){                    blocks[i][j].setBackgroundColor(Color.GREEN);                }            }        }    }    @Override    public boolean onTouchEvent(MotionEvent event){        {            switch(event.getAction())            {                case MotionEvent.ACTION_DOWN:                    x1 = event.getX();                    downY = event.getY();                    break;                case MotionEvent.ACTION_UP:                    x2 = event.getX();                    upY = event.getY();                    float deltaX = x2 - x1;                    float deltaY = upY- downY;                    if (Math.abs(deltaX) > MIN_DISTANCE)                    {                        //Move right                        if (x2 > x1)                        {                            gameThread.moveRight();                        }                        // Right to left swipe action                        else                        {                            gameThread.moveLeft();                        }                    }//VERTICAL SCROLL                    else                        if(Math.abs(deltaY) > MIN_DISTANCE){                            // top or down                            if(deltaY > 0)                            {                                gameThread.changeSpeed();                                return true;                            }                        }                    else                    {                            gameThread.needToChange();                    }                    break;            }            return super.onTouchEvent(event);        }    }    //Checking for button click    public void onClick(View view){        if(view.getId() == btnRot.getId()){            gameThread.needToChange();        }        if(view.getId() == btnRight.getId()){            gameThread.moveRight();        }        if(view.getId() ==btnLeft.getId()){            gameThread.moveLeft();        }    }    public void changeScore(int text){        tvScore.setText("Score: \n" + text);    }    @Override    public boolean onTouch(View v, MotionEvent event) {        {            /*switch(event.getAction())            {                case MotionEvent.ACTION_DOWN:                    x1 = event.getX();                    break;                case MotionEvent.ACTION_UP:                    x2 = event.getX();                    float deltaX = x2 - x1;                    if (Math.abs(deltaX) > MIN_DISTANCE)                    {                        if (x2 > x1)                        {                            gameThread.moveRight();                        }                        // Right to left swipe action                        else                        {                            gameThread.moveLeft();                        }                    }                    else                    {                        gameThread.needToChange();                    }                    break;            }            return super.onTouchEvent(event);*/        }        return true;    }}//Full visible == 1000 alpha